generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NewsletterFrequency {
  daily
  weekly
  monthly
}

enum UserRole {
  user
  investor
  borrower
  admin
  superadmin
}

enum LemverifyType {
  COMBINATION
  DOCUMENT
  LIVENESS
  AML_ALERT
}

enum LemverifyResult {
  PASSED
  REFER
  ERROR
  ALERT
}

enum ProjectStatus {
  new
  coming_soon
  funded
  repaid
}

enum LoanType {
  business
  sme
  leasing
  realestate
}

enum VerificationStatus {
  verification_pending
  verification_complete
}

model User {
  id                            String              @id @default(uuid())
  first_name                    String?             @db.VarChar(100)
  last_name                     String?             @db.VarChar(100)
  email                         String              @unique @db.VarChar(255)
  password                      String // Hashed
  phone                         String?             @db.VarChar(50)
  country                       String?             @db.VarChar(100)
  city                          String?             @db.VarChar(100)
  address                       String?
  newsletter_frequency          NewsletterFrequency @default(weekly)
  transaction_notification      Boolean             @default(true)
  latest_news_notification      Boolean             @default(true)
  role                          UserRole            @default(user)
  email_verified_at             DateTime?
  verification_token            Int?
  verification_token_expires_at DateTime?
  login_token                   Int?
  login_token_expires_at        DateTime?
  reset_token                   String?             @db.Char(64)
  reset_token_expires_at        DateTime?
  remember_token                String?             @db.Char(64)
  created_at                    DateTime            @default(now())
  updated_at                    DateTime            @updatedAt

  kycVerifications KYCVerification[]

  @@map("users")
}

model KYCVerification {
  id                              String             @id @default(uuid())
  user_id                         String
  lemverify_system_id             String             @unique
  lemverify_friendly_id           String
  lemverify_type                  LemverifyType
  lemverify_result                LemverifyResult
  lemverify_processed_at          DateTime
  lemverify_started_at            DateTime?
  lemverify_deletion_at           DateTime?
  lemverify_balance_at_check      Int?
  lemverify_refer_message         String?
  lemverify_extracted_person      Json?
  lemverify_extracted_documents   Json?
  lemverify_extracted_live_person Json?
  lemverify_alerts                Json?
  client_ref_sent                 String             @db.VarChar(255)
  status_in_our_system            VerificationStatus @default(verification_complete)
  full_webhook_payload            Json?
  created_at                      DateTime           @default(now())
  updated_at                      DateTime           @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("kyc_verifications")
}

model Project {
  id                String        @id @default(uuid())
  title             String        @db.VarChar(255)
  short_description String?
  description       String?
  photo_url         String?
  country           String?       @db.VarChar(100)
  status            ProjectStatus
  loan_type         LoanType
  target_amount     Decimal       @db.Decimal(12, 2)
  expected_return   Decimal       @db.Decimal(5, 2)
  investment_period Int
  amount_funded     Decimal       @db.Decimal(12, 2)
  date_issued       DateTime?
  closing_date      DateTime
  collateral_value  Decimal?      @db.Decimal(12, 2)
  loan_to_value     Decimal?      @db.Decimal(5, 2)
  is_convertible    Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("projects")
}
